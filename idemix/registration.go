/*
SPDX-License-Identifier: Apache-2.0
*/

package idemix

import (
	"github.com/hyperledger/fabric-amcl/amcl/FP256BN"
	"github.com/hyperledger/fabric-amcl/amcl"
)

//When the group is set up, the system creates the group tracing key and group public key.
//The user can register with an idendity, then CA will generate a key pair (x,Ax) for the user with Issuer Secret Key.
//(x,Ax) is sent to the user and used to generate signatures of the Credential.
//The tracing key is kept by CA and used to reveal the identity from the signature generated by the anonymous user when disputes occur.
// The group public key is public.
//The details are shown in BBS group siganture scheme.
// For BBS group signature scheme, see e.g. "Short Group Signatures" by Dan Boneh, Xavier Boyen, Hovav Shacham, at https://link.springer.com/content/pdf/10.1007%2F978-3-540-28628-8_3.pdf.
//NewGroupKey creates the group tracing key for CA and the group public key when the group is set up.

func NewGroupKey(rng *amcl.RAND) (*GroupKey, error) {
	gk := new(GroupKey)

	//generating the tracing key
	r1 := RandModOrder(rng)
	r2 := RandModOrder(rng)

	gk.TK = new(TracingKey)

	gk.TK.TK1 = BigToBytes(r1)
	gk.TK.TK2 = BigToBytes(r2)

	//generating the group public key
	gk.GPK = new(GroupPublicKey)

	U := GenG1.Mul(r2)
	V := GenG1.Mul(r1)
	H := U.Mul(r1)

	gk.GPK.U = EcpToProto(U)
	gk.GPK.V = EcpToProto(V)
	gk.GPK.H = EcpToProto(H)

	return gk,nil
}

//CA runs Registration and creates a key pair for a user.
func Registration(key *IssuerKey, rng *amcl.RAND) (*UserKey, error) {
	uk := new(UserKey)

	//generating user's key
	x := RandModOrder(rng)
	temp := Modadd(FP256BN.FromBytes(key.GetISk()),x,GroupOrder)
	temp.Invmodp(GroupOrder)
	Ax := GenG1.Mul(temp)

	uk.UK1 = BigToBytes(x)
	uk.UK2 = EcpToProto(Ax)

	return uk,nil
}