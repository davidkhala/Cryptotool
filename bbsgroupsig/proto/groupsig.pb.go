// Code generated by protoc-gen-go. DO NOT EDIT.
// source: groupsig.proto

package bbsgroupsig

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ECP is an elliptic curve point specified by its coordinates
// ECP corresponds to an element of the first group (G1)
type ECP struct {
	X                    []byte   `protobuf:"bytes,1,opt,name=X,proto3" json:"X,omitempty"`
	Y                    []byte   `protobuf:"bytes,2,opt,name=Y,proto3" json:"Y,omitempty"`
}

func (m *ECP) Reset()         { *m = ECP{} }
func (m *ECP) String() string { return proto.CompactTextString(m) }
func (*ECP) ProtoMessage()    {}
func (*ECP) Descriptor() ([]byte, []int) {
	return fileDescriptor_groupsig_17bfcbbcc4646e92, []int{0}
}

func (m *ECP) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *ECP) GetY() []byte {
	if m != nil {
		return m.Y
	}
	return nil
}

// ECP2 is an elliptic curve point specified by its coordinates
// ECP2 corresponds to an element of the second group (G2)
type ECP2 struct {
	XA                   []byte   `protobuf:"bytes,1,opt,name=XA,proto3" json:"XA,omitempty"`
	XB                   []byte   `protobuf:"bytes,2,opt,name=XB,proto3" json:"XB,omitempty"`
	YA                   []byte   `protobuf:"bytes,3,opt,name=YA,proto3" json:"YA,omitempty"`
	YB                   []byte   `protobuf:"bytes,4,opt,name=YB,proto3" json:"YB,omitempty"`
}

func (m *ECP2) Reset()         { *m = ECP2{} }
func (m *ECP2) String() string { return proto.CompactTextString(m) }
func (*ECP2) ProtoMessage()    {}
func (*ECP2) Descriptor() ([]byte, []int) {
	return fileDescriptor_groupsig_17bfcbbcc4646e92, []int{1}
}

func (m *ECP2) GetXA() []byte {
	if m != nil {
		return m.XA
	}
	return nil
}

func (m *ECP2) GetXB() []byte {
	if m != nil {
		return m.XB
	}
	return nil
}

func (m *ECP2) GetYA() []byte {
	if m != nil {
		return m.YA
	}
	return nil
}

func (m *ECP2) GetYB() []byte {
	if m != nil {
		return m.YB
	}
	return nil
}

// GroupMasterKey specifies a group master secret key that consists of
// gmsk - a random integer used to generate users' secret keys
type GroupMasterKey struct {
	Sk                   []byte   `protobuf:"bytes,1,opt,name=Sk,proto3" json:"Sk,omitempty"`
}

func (m *GroupMasterKey) Reset()         { *m = GroupMasterKey{} }
func (m *GroupMasterKey) String() string { return proto.CompactTextString(m) }
func (*GroupMasterKey) ProtoMessage()    {}
func (*GroupMasterKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_groupsig_17bfcbbcc4646e92, []int{2}
}

func (m *GroupMasterKey) GetSk() []byte {
	if m != nil {
		return m.Sk
	}
	return nil
}

// TracingKey specifies a group tracing key that consists of
// TK1,TK2 - random integers
type TracingKey struct {
	TK1                  []byte   `protobuf:"bytes,1,opt,name=TK1,proto3" json:"TK1,omitempty"`
	TK2                  []byte   `protobuf:"bytes,2,opt,name=TK2,proto3" json:"TK2,omitempty"`
}

func (m *TracingKey) Reset()         { *m = TracingKey{} }
func (m *TracingKey) String() string { return proto.CompactTextString(m) }
func (*TracingKey) ProtoMessage()    {}
func (*TracingKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_groupsig_17bfcbbcc4646e92, []int{3}
}

func (m *TracingKey) GetTK1() []byte {
	if m != nil {
		return m.TK1
	}
	return nil
}

func (m *TracingKey) GetTK2() []byte {
	if m != nil {
		return m.TK2
	}
	return nil
}

// GroupPublicKey specifies a group public key that consists of
// u,v,h - group elements corresponding to the group signing key
type GroupPublicKey struct {
	U                    *ECP     `protobuf:"bytes,1,opt,name=U,proto3" json:"U,omitempty"`
	V                    *ECP     `protobuf:"bytes,2,opt,name=V,proto3" json:"V,omitempty"`
	H                    *ECP     `protobuf:"bytes,3,opt,name=H,proto3" json:"H,omitempty"`
	W                    *ECP2    `protobuf:"bytes,4,opt,name=W,proto3" json:"W,omitempty"`
}

func (m *GroupPublicKey) Reset()         { *m = GroupPublicKey{} }
func (m *GroupPublicKey) String() string { return proto.CompactTextString(m) }
func (*GroupPublicKey) ProtoMessage()    {}
func (*GroupPublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_groupsig_17bfcbbcc4646e92, []int{4}
}

func (m *GroupPublicKey) GetU() *ECP {
	if m != nil {
		return m.U
	}
	return nil
}

func (m *GroupPublicKey) GetV() *ECP {
	if m != nil {
		return m.V
	}
	return nil
}

func (m *GroupPublicKey) GetH() *ECP {
	if m != nil {
		return m.H
	}
	return nil
}

func (m *GroupPublicKey) GetW() *ECP2 {
	if m != nil {
		return m.W
	}
	return nil
}

// GroupKey specifies a group key that consists of
// TK - group tracing key
// GPK - group public key
type GroupKey struct {
	Gmsk                 *GroupMasterKey `protobuf:"bytes,1,opt,name=gmsk,proto3" json:"gmsk,omitempty"`
	TK                   *TracingKey     `protobuf:"bytes,2,opt,name=TK,proto3" json:"TK,omitempty"`
	GPK                  *GroupPublicKey `protobuf:"bytes,3,opt,name=GPK,proto3" json:"GPK,omitempty"`
}

func (m *GroupKey) Reset()         { *m = GroupKey{} }
func (m *GroupKey) String() string { return proto.CompactTextString(m) }
func (*GroupKey) ProtoMessage()    {}
func (*GroupKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_groupsig_17bfcbbcc4646e92, []int{5}
}

func (m *GroupKey) GetGmsk() *GroupMasterKey {
	if m != nil {
		return m.Gmsk
	}
	return nil
}

func (m *GroupKey) GetTK() *TracingKey {
	if m != nil {
		return m.TK
	}
	return nil
}

func (m *GroupKey) GetGPK() *GroupPublicKey {
	if m != nil {
		return m.GPK
	}
	return nil
}

// UserKey specifies a user's private key pair that consists of
// UK1 - a random integer
// UK2 - an element corresponding to the private key
type UserKey struct {
	UK1                  []byte   `protobuf:"bytes,1,opt,name=UK1,proto3" json:"UK1,omitempty"`
	UK2                  *ECP     `protobuf:"bytes,2,opt,name=UK2,proto3" json:"UK2,omitempty"`
}

func (m *UserKey) Reset()         { *m = UserKey{} }
func (m *UserKey) String() string { return proto.CompactTextString(m) }
func (*UserKey) ProtoMessage()    {}
func (*UserKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_groupsig_17bfcbbcc4646e92, []int{6}
}

func (m *UserKey) GetUK1() []byte {
	if m != nil {
		return m.UK1
	}
	return nil
}

func (m *UserKey) GetUK2() *ECP {
	if m != nil {
		return m.UK2
	}
	return nil
}

// Signature specifies a signature object that consists of
// and the corresponding user secret together with the attribute values
type GroupSignature struct {
	T1                   *ECP     `protobuf:"bytes,1,opt,name=T1,proto3" json:"T1,omitempty"`
	T2                   *ECP     `protobuf:"bytes,2,opt,name=T2,proto3" json:"T2,omitempty"`
	T3                   *ECP     `protobuf:"bytes,3,opt,name=T3,proto3" json:"T3,omitempty"`
	ProofC               []byte   `protobuf:"bytes,4,opt,name=ProofC,proto3" json:"ProofC,omitempty"`
	ProofSalpha          []byte   `protobuf:"bytes,5,opt,name=ProofSalpha,proto3" json:"ProofSalpha,omitempty"`
	ProofSbeta           []byte   `protobuf:"bytes,6,opt,name=ProofSbeta,proto3" json:"ProofSbeta,omitempty"`
	ProofSx              []byte   `protobuf:"bytes,7,opt,name=ProofSx,proto3" json:"ProofSx,omitempty"`
	ProofSdelta1         []byte   `protobuf:"bytes,8,opt,name=ProofSdelta1,proto3" json:"ProofSdelta1,omitempty"`
	ProofSdelta2         []byte   `protobuf:"bytes,9,opt,name=ProofSdelta2,proto3" json:"ProofSdelta2,omitempty"`
}

func (m *GroupSignature) Reset()         { *m = GroupSignature{} }
func (m *GroupSignature) String() string { return proto.CompactTextString(m) }
func (*GroupSignature) ProtoMessage()    {}
func (*GroupSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_groupsig_17bfcbbcc4646e92, []int{7}
}

func (m *GroupSignature) GetT1() *ECP {
	if m != nil {
		return m.T1
	}
	return nil
}

func (m *GroupSignature) GetT2() *ECP {
	if m != nil {
		return m.T2
	}
	return nil
}

func (m *GroupSignature) GetT3() *ECP {
	if m != nil {
		return m.T3
	}
	return nil
}

func (m *GroupSignature) GetProofC() []byte {
	if m != nil {
		return m.ProofC
	}
	return nil
}

func (m *GroupSignature) GetProofSalpha() []byte {
	if m != nil {
		return m.ProofSalpha
	}
	return nil
}

func (m *GroupSignature) GetProofSbeta() []byte {
	if m != nil {
		return m.ProofSbeta
	}
	return nil
}

func (m *GroupSignature) GetProofSx() []byte {
	if m != nil {
		return m.ProofSx
	}
	return nil
}

func (m *GroupSignature) GetProofSdelta1() []byte {
	if m != nil {
		return m.ProofSdelta1
	}
	return nil
}

func (m *GroupSignature) GetProofSdelta2() []byte {
	if m != nil {
		return m.ProofSdelta2
	}
	return nil
}

// K specifies a user's private key that is decrypted by CA
type K struct {
	Ax                   *ECP     `protobuf:"bytes,1,opt,name=Ax,proto3" json:"Ax,omitempty"`
}

func (m *K) Reset()         { *m = K{} }
func (m *K) String() string { return proto.CompactTextString(m) }
func (*K) ProtoMessage()    {}
func (*K) Descriptor() ([]byte, []int) {
	return fileDescriptor_groupsig_17bfcbbcc4646e92, []int{8}
}

func (m *K) GetAx() *ECP {
	if m != nil {
		return m.Ax
	}
	return nil
}

func init() {
	proto.RegisterType((*ECP)(nil), "ECP")
	proto.RegisterType((*ECP2)(nil), "ECP2")
	proto.RegisterType((*GroupMasterKey)(nil), "GroupMasterKey")
	proto.RegisterType((*TracingKey)(nil), "TracingKey")
	proto.RegisterType((*GroupPublicKey)(nil), "GroupPublicKey")
	proto.RegisterType((*GroupKey)(nil), "GroupKey")
	proto.RegisterType((*UserKey)(nil), "UserKey")
	proto.RegisterType((*GroupSignature)(nil), "GroupSignature")
	proto.RegisterType((*K)(nil), "K")
}

func init() { proto.RegisterFile("groupsig.proto", fileDescriptor_groupsig_17bfcbbcc4646e92) }

var fileDescriptor_groupsig_17bfcbbcc4646e92 = []byte{
	// 430 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x93, 0xcf, 0x6e, 0x9b, 0x40,
	0x10, 0xc6, 0xb5, 0x8b, 0x63, 0xa7, 0x83, 0xeb, 0x46, 0xdb, 0x2a, 0xda, 0xaa, 0x52, 0xe5, 0x6c,
	0x2f, 0x3d, 0x59, 0x65, 0xfd, 0x04, 0x60, 0xb9, 0x89, 0x84, 0x2a, 0x21, 0x0c, 0x09, 0xf4, 0x06,
	0x29, 0xa5, 0x96, 0xdd, 0x60, 0x01, 0x96, 0xdc, 0x97, 0xe8, 0x33, 0x57, 0x33, 0xac, 0x1d, 0xd3,
	0xdc, 0xe6, 0xfb, 0x7d, 0xf3, 0x67, 0x67, 0x10, 0x30, 0x29, 0xeb, 0x6a, 0xbf, 0x6b, 0xd6, 0xe5,
	0x6c, 0x57, 0x57, 0x6d, 0xa5, 0x6e, 0xc0, 0x5a, 0x2e, 0x02, 0x31, 0x06, 0x96, 0x48, 0x36, 0x65,
	0x9f, 0xc7, 0x21, 0x4b, 0x50, 0xa5, 0x92, 0x77, 0x2a, 0x55, 0x5f, 0x61, 0xb0, 0x5c, 0x04, 0x5a,
	0x4c, 0x80, 0x27, 0xae, 0x49, 0xe2, 0x89, 0x4b, 0xda, 0x33, 0x69, 0x3c, 0xf1, 0x50, 0xa7, 0xae,
	0xb4, 0x3a, 0x9d, 0x92, 0x9f, 0x7a, 0x72, 0x60, 0xb4, 0xa7, 0xa6, 0x30, 0xb9, 0xc5, 0xe1, 0xdf,
	0xb2, 0xa6, 0x2d, 0x6a, 0xbf, 0xf8, 0x83, 0x19, 0xab, 0xcd, 0xb1, 0xe3, 0x6a, 0xa3, 0xbe, 0x00,
	0x44, 0x75, 0xf6, 0xb8, 0x7e, 0x2a, 0xd1, 0xbd, 0x02, 0x2b, 0xf2, 0x1d, 0x63, 0x63, 0xd8, 0x11,
	0x6d, 0x46, 0x62, 0xa8, 0x32, 0xd3, 0x33, 0xd8, 0xe7, 0xdb, 0xf5, 0x23, 0x56, 0x09, 0x60, 0x31,
	0xd5, 0xd8, 0x7a, 0x30, 0x5b, 0x2e, 0x82, 0x90, 0xc5, 0xc8, 0xee, 0xa9, 0xea, 0xc4, 0xee, 0x91,
	0xdd, 0xd1, 0x63, 0x4f, 0xec, 0x4e, 0xbc, 0x05, 0xf6, 0x40, 0x0f, 0xb6, 0xf5, 0x05, 0x32, 0x1d,
	0xb2, 0x07, 0x55, 0xc1, 0x25, 0x8d, 0xc0, 0xe6, 0x9f, 0x60, 0x50, 0xfe, 0x6e, 0x36, 0xa6, 0xff,
	0x9b, 0x59, 0x7f, 0x9f, 0x90, 0x4c, 0xf1, 0x01, 0x78, 0xe4, 0x9b, 0x71, 0xf6, 0xec, 0x79, 0xa1,
	0x90, 0x47, 0xbe, 0xb8, 0x01, 0xeb, 0x36, 0xf0, 0xcd, 0x60, 0xd3, 0xe0, 0xf4, 0xf8, 0x10, 0x3d,
	0x35, 0x87, 0x51, 0xdc, 0x74, 0x07, 0xba, 0x02, 0x2b, 0x7e, 0x3e, 0x41, 0xec, 0x3b, 0xe2, 0x1a,
	0x89, 0xee, 0x2d, 0x83, 0x40, 0xfd, 0xe5, 0xe6, 0x12, 0xab, 0x75, 0xf9, 0x94, 0xb5, 0xfb, 0xba,
	0x10, 0xef, 0x80, 0x47, 0x4e, 0xef, 0x14, 0x3c, 0x72, 0x88, 0xf6, 0xeb, 0x79, 0xa4, 0x89, 0xce,
	0x7b, 0xe7, 0xe0, 0xd1, 0x5c, 0x5c, 0xc3, 0x30, 0xa8, 0xab, 0xea, 0xe7, 0xc2, 0x7c, 0x45, 0xa3,
	0xc4, 0x14, 0x6c, 0x8a, 0x56, 0xd9, 0x76, 0xf7, 0x2b, 0x93, 0x17, 0x64, 0x9e, 0x23, 0xf1, 0x11,
	0xa0, 0x93, 0x79, 0xd1, 0x66, 0x72, 0x48, 0x09, 0x67, 0x44, 0x48, 0x18, 0x75, 0xea, 0x20, 0x47,
	0x64, 0x1e, 0xa5, 0x50, 0x30, 0xee, 0xc2, 0x1f, 0xc5, 0xb6, 0xcd, 0x1c, 0x79, 0x49, 0x76, 0x8f,
	0xfd, 0x97, 0xa3, 0xe5, 0xab, 0x17, 0x39, 0x5a, 0xbd, 0x07, 0xe6, 0xe3, 0x5a, 0xee, 0xa1, 0x7f,
	0x02, 0xf7, 0xe0, 0xbd, 0xfe, 0x6e, 0xe7, 0x79, 0x73, 0xfc, 0x11, 0xf2, 0x21, 0xfd, 0x09, 0xf3,
	0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x85, 0x6e, 0x56, 0x1b, 0x03, 0x00, 0x00,
}
